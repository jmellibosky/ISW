Riesgos relacionados con RTO: falta de HW (Tema de Proyecto Final)
Gestión de riesgos.

Tema: RTO Ágiles y User Histories - U2

Aclaración: Es 1 Tema de Final, suelen hablar directamente de UH como 1 técnica pero no es la única. El tema es entender porque es 1ro
la UH. Del manifiesto Ágil surgen los RTO ágiles. TRabajamos con UH porque están de moda.

Manifiesto ágil: 4 valores y 12 principios. Recuerden que esto se lee: "privilegiamos + lo de la izq que lo de la der"

Principios Ágiles referidos a los RTO: la COM cara a cara, Cambios de RTO, AR DI y RTO emergentes (por ahora).

Toda esta clas etiene que ver con el fundamento de los RTOS agiles, la idea es tener en mente el satifacer a los CLI con el SW que necesita. Utilizar
valor de negocio, que sea algo que realmente le ayude al cli.
El 1er desafio de los RTO agiles es comprender que no van a estar disponibles todos los RTO al principio, que hay que empezar a trabajar con los RTO
necesarios para poder empezar a trabajar y asi realimentar durante cada iteración e ir descubriendo nuevos.
Captar solo los RTO necesarios.

El costo tradicional del BRUF

Cada porción me dice las CTS de SW que se usan. Siempre se suele usar 1 % minimo de la fnucionalidad. Si nosotros nos centramos en terminar el producto
no es rentable el uso que le vamos a hacer, debemos centrarnos en entender el 20 % de las CTS dle producto que es lo + se va a utilizar.

La prioridad de los RTO la definirá el cli, vienen de él siempre. Resulta que estamos integrando al cli en el equipo.
Lo que el cli impone, segun el enfoque agil, son los RTO y muchas veces el orden en que quiera que sean implementados. En este enfoque, Se le da mucha +
importancia a los RTO del cli.
La lista o pila de RTO es manejada por el cli y es el quien incluye su criterio de priorización. El product Owner Es el que tiene la responsabilidad de agregar 
RTO a esta pila de acuerdo a la importancia de ellos. El PO caeria en la categoria de NO TECNICO, el principio que relaciona lo TECNICO con los NO TECNICO nos quiere
decir que el PO y el equipo van a trabar juntos y esta es 1 diff con las filosofías tradicionales.
La colaboracion del equipo con el PO es no NEGOCIAR con el PO sino ACORDAR CON EL. 
Concepto de Just IN TIME: esta asociado a la produccion y los RTO, tiene que ver con evitar la doc detallada de los RTOS. Este es otro de los fundamentos imprescindibles
de la filosofia Ágil. Detallo los + importantes y al resto de RTO que no voy a implementar en esta iteración los voy a postergar para la iteración en donde los vaya a implkementar
Para nosotros los RTO deben llegar al equipo cuando se debe implementar,. ANTES NO por que el equipo los analiza habiendo 1 desperdicio.
La COM cara a cara logra es + eficiente y dinamica de acordar de que es lo que necesita el PO. Tampoco es captar lo que nos dice e ir a implementarlo, es analizarlo y acordarlo.
EL PO va a velar por el producto, nostros vamos a velar por algo posible y consntruido con calidad.

Los mecanismos de compensación como los mail y doc, deben ser tomados como solo eso, no como canales de COM porque el acuerdo puede no llegar a darse. No es malo, pero es una ayuda.

Cuadro de Tradicional vs Ágil

Avanzamos en lo que seria las diff entre contratos ágiles y tradicionales.

Triangulo de hierro en el enfoque tradicional: Dirigido por 1 plan
Triangulo de hierro en el enfoque ágil: Dirigido por valor ( le voy a dejar manejar lo que el quiere en cada iteracion, apuntando a tener valor para el cli)

¿ CUantos de los RTO que yo priorice me podes armar en esta iteracion ? Eso es lo que el enfoque ágil maneja, RTO priorizados por el cli. (PE: el cli es 1 niño con plata y quiere comprar todos los chicles que pueda en 1 kiosco)

Tipos de RTO

+ Negocio: Disminuir t entre P, implementar 1 bot, mejorar el Negocio.
La especificaciond de RTO la deja a libre implementacion de los grupos de trabajo.
La comparación entre cual es mejor o peor no tiene sentido porque son muy distintos.

En resumen, sintesis de como funciona los RTOS agiles, --- > que es lo quiere el negocio, tecnicos y no tecnicos trabajando juntos just in time e ir generando SW de valor en cada iteración.
Estamos viendo 1 situacion de aceptacion, tenemos que entender que muchas veces van a cambiar los RTO y que van a afectar a todos los STACK HOLDERS de la mano de los PO.
Muchas veces los U entienden lo que quieren cuando reciben 1 version ejecutable.

Principios Ágiles directamente relacionados con los RTO ágiles. donde el 1 y 2 son los más importantes. El ultimo nos impacta en el enfoque de RTO agiles porque los RTO deben construirlos en el equipo
NO recibirlos como IMPOSICION.

UH

Sirven para que el U nos cuente lo que necesita. Muchas veces es dificil e contar y de interpretarla en los terminos en los que el U necesita.
Muchas veces el 60% del SW se tira a la basura porque no se usan.
Tienen 3 partes:
+ Card : parte visible que describe la necesidad del U,. al dorso describimos cosas que nostros deberiamos implementar para probar de que han sido implementadas
correctamente, muchas veces hechas como Casos de Prueba (CP) o Pruebas de U.

+ COnversation:

+ COnfirmacion:

La conversación es la + importante. Por que el principio ágil de COM cara a cara se define en esta parte. La conversación COMPENSA la DOC extensa, lo cual
no quiere decir que no va a haber gráficos, Maquinas de estados, CU o cualquier otra herramienta que nos ayude a entender la UH.
No se debe evitar, Por que lo que esta escrito en la tarjeta no alcanza. UH: definicion corta de la funcionalidad, al ser corta no es lo adecuado para trabajar 
de forma definitiva.

Tiene 1 sintaxis recomendad para escribir la parte de frente de la tarjeta. Lo hizo en el contexto ..., osea que no la invento SCRUM
Tiene 3 partes:
- Quien va  a recibir el beneficio de esta tarjeta, y se habla de roles
- LA Accion que realizará el S
- Valor de negocio que recibo: esto a mi, como me ayuda? Como hago para obtener valor de negocio con esto ?

Son de multipropósito. Es 1 disparador para la conversacion que debemos tener con el U.
El PO va jugando con los items que va necesitanto en la pila de RTO. Las de mas alta prioridad tienen 1 alta P() de que sean elegidas como UH.
LAS DE ABAJO NO, porque la I con la que cuenta y su prioridad son pocas.

Son Porciones verticales, como se deben hacer entregas frecuentes del SW funcionando el corte en el SW debe abarcar varias cosas cosa de poder entregar funcionalidad.
Ej: Presentacion, Business Logic y BD. Aplicar 1 poco de todo para entregar valor.}
El hecho de que la UH pueda ser implementada de esta manera habla de la divisibilidad que tiene la propia UH para ser implementada otorgando funcionalidad.

Quienes las escribe es el PO y tamb escribe los Criterios de Aceptacion (CA). Lo importante es que los RTO vengan dados por el PO. Al menos debería tratar de escribirlas
y puede no tratar de escribirla.

Epica: UH que son muy grandes y se descomponen en partes mas chicas. Se puede partir siempre y cuando genere valor.

Modelado de Roles:

Tarjeta del rol de U: tener 1 idea de quien es el que va a usar la IN. Es conveniente invertir t en describir los roles de los U que van a utilizar
la IN.

NO ESCRIBIR LAS UH LLAMANDO AL U COMO U, SINO describirlo como 1 ROL, 1 nombre que nos ayude a imaginarnos quien es.

1 TÉCNICA ES ---> personas.

Ej del rol de U en proporcionar USABILIDAD al SW: "mover el cursor hacia abajo mientras cargo todas las notas, no que me desplaze a cargar las notas de los demás parciales..."

Es importante que el Cli este cautivado con la Usabilidad, sino no se usa el SW.

El PO debe tener conocimiento de lo que quiere y Capacidad de decisión.

Con los CA determino si lo que el cli quiere es lo que se implemente.

Pruebas de Aceptación (PA). En funcion de los CA se deriban las PA. 
La sem que viene escribimos UH a partir de 1 U, adelante la redacción y CA y ATRAS las PA.

---------
Si la UH no se llega a completar en 1 iteracion entre en la prox iteracino con la espera que se termine y cuando se termine se presente.